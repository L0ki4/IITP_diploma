from GhostVLAD_mris.configs.dataset import *
from dpipe_configs.torch import *

from dpipe.batch_iter import Infinite

from torch.optim import Adam
from torch import nn
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from functools import partial

from GhostVLAD_mris.nets import model_predict
from GhostVLAD_mris import resources

# dataset
changed_diagnoses = [0, 2]  # [0,1], [1,2]
n_classes = 2
factors = [1, 1, 1, 1]
projections = ['tra']  # ['sag','tra'], ['tra']
changed_models = None

# split and get data
tomograph_model = 'Titan'
n_splits = 3

split = resources.stratified_cv_4one(
    dataset.ids, dataset.load_labels(dataset.ids), dataset.load_models(dataset.ids),
    tomograph_model, n_splits=n_splits, val_size=40
)

# batch iteration
n_samples_per_epoch = 300

batch_iter = Infinite(
    resources.stratified_loader(train_ids, dataset.load_labels(train_ids), dataset.load_models(train_ids),
                                dataset.load_projections(train_ids), load_x, load_y),
    batch_size=batch_size,
    batches_per_epoch=max(n_samples_per_epoch // batch_size, 1)
)

optimizer = Adam(architecture.parameters())
criterion = nn.CrossEntropyLoss()

# evalutation
predict = partial(model_predict, net=architecture)

val_metrics = metrics = {
    'accuracy': accuracy_score,
    'precision': precision_score,
    'recall': recall_score,
    'f1': f1_score,
    'roc auc': roc_auc_score
}
